/// @title ERC20
/// @author Ahiara Ikechukwu Marvellous
/// @notice An ERC20 token implementation in Huff
/// @dev This is a simple ERC4626 token implementation based on transmissions11 solmate implentation.

/* Interface */
#define function name() nonpayable returns(string)
#define function symbol() nonpayable returns (string)
#define function decimals() nonpayable returns (uint8)

#define function balanceOf(address) view returns (uint256)
#define function allowance(address,address) view returns (uint256)
#define function totalSupply() view returns (uint256)

#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns ()

#define function mint(address,uint256) nonpayable returns ()
#define function burn(uint256) nonpayable returns ()

#define event Transfer(address,address,uint256)
#define event Approval(address,address,uint256)

/* Event Signatures */
#define constant TRANSFER_EVENT_SIGNATURE = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
#define constant APPROVAL_EVENT_SIGNATURE = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925

/* Metadata Storage Slots */
#define constant NAME_LOACATION = FREE_STORAGE_POINTER()
#define constant SYMBOL_LOCATION = FREE_STORAGE_POINTER()
#define constant DECIMALS = 0x0000000000000000000000000000000000000000000000000000000000000018 // actually immutable gets swapped out in deployment

/* ERC20 Storage Slots */
#define constant TOTAL_SUPPLY_LOCATION = FREE_STORAGE_POINTER()
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()

/* Constructor */
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Copy first argument (string) and length into memory
    0x40                        // [size] - byte size to copy
    0x80 codesize               // [argument-offset, contractsize] - where arguments start and contract size
    sub                         // [offset] - offset in the code to copy from
    0x00                        // [mem, offset, size] - offset in memory to copy to
    codecopy                    // []

    // store first argument
    0x00                   // [0x00]
    mload                  // [arglength]
    0x20                   // [0x20, arglength]
    mload                  // [arg, argLength]
    swap1                  // [argLength, arg]
    0x01                   // [1, argLength, arg]
    shl                    // [arglength * 2, arg]
    or                     // [arg] 
    [NAME_LOACATION]       // [name_ptr]
    sstore

    // Copy the second argument into memory
    0x20                        // [size] - byte size to copy
    0x20 codesize               // [argument-offset, contractsize] - where arguments start and contract size
    sub                         // [offset] - offset in the code to copy from
    0x00                        // [mem, offset, size] - offset in memory to copy to
    codecopy                    // []

    // Store the second argument in storage
    0x00                        // [0x00]
    mload                       // [arg2]
    [SYMBOL_LOCATION]           // [symbol_ptr]
    sstore                      // []
}

/* Metadata Functions */
#define macro NAME() = takes (0) returns (0) {
    [NAME_LOACATION]     // [name_ptr]
    sload                // [name]

    // store in memory
    0x00                 // [0x00, name]
    mstore               // []

    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro SYMBOL() = takes (0) returns (0) {
    // read symbol from storage
    [SYMBOL_LOCATION]    // [symbol_ptr]
    sload                // [symbol]

    // store in memory
    0x00                 // [0x00, symbol]
    mstore               // []

    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro DECIMALS() = takes (0) returns (0) {
    // store in memory
    [DECIMALS]           // [DECIMALS]
    sload              // []

    // store in memory
    0x00                 // [0x00, decimals]
    mstore               // []
    
    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

/* Accounting Functions */
#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    // read total supply from storage
    [TOTAL_SUPPLY_LOCATION] // [total_supply_ptr]
    sload                // [total_supply]
    
    // store in memory
    0x00                 // [0x00, total_supply]
    mstore               // []
    
    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro BALANCE_OF() = takes (0) returns (0) {
    // read balance from storage
    0x04 calldataload    // [address]
    [BALANCE_LOCATION]   // [balance_ptr, address]
    0x00                 // [0x00, balance_ptr, address]
    mstore               // [address]
    0x20                 // [0x20, address]
    mstore               // []
    0x40                 // [0x40]
    0x00                 // [0x00, 0x40]
    sha3                 // [key]
    sload                // [balance]
    
    // store in memory
    0x00                 // [0x00, balance]
    mstore               // []
    
    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro ALLOWANCE() = takes (0) returns (0) {
    0x24 calldataload              // [spender]
    0x04 calldataload              // [owner, spender]

    // mapping owner => spender => allowance
    // First hash allownace_ptr & owner to get storage loaction for spender => allowance
    // then hash the spender storage slot & spender to get the allowance key
    // then read the allowance from storage

    [ALLOWANCE_LOCATION]           // [allowance_ptr, owner, spender]
    0x00                           // [0x00, allowance_ptr, owner, spender]
    mstore                         // [owner, spender]
    0x20                           // [0x20, owner, spender]
    mstore                         // [spender]
    0x40                           // [0x40, spender]
    0x00                           // [0x00, 0x40, spender]
    sha3                           // [slot, spender]
    0x00                          // [0x00, slot, spender]
    mstore                        // [spender]
    0x20                          // [0x20, spender]
    mstore                        // []
    0x40                          // [0x40]
    0x00                          // [0x00, 0x40]
    sha3                          // [key]
    sload                         // [allowance]

    // store in memory
    0x00                          // [0x00, allowance]
    mstore                        // []

    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

/* Transfer Functions */
#define macro TRANSFER_FROM() = takes(0) returns (0) {
    // read balance from storage
    0x44 calldataload    // [value]
    0x24 calldataload    // [to, value]
    0x04 calldataload    // [from, to, value]
    
    // retrieve allowance from storage
    [ALLOWANCE_LOCATION]  // [allowance_ptr, from, to, value]
    0x00                  // [0x00, allowance_ptr, from, to, value]
    mstore                // [from, to, value]
    dup1                  // [from, from, to, value]
    0x20                  // [0x20, from, from, to, value]
    mstore                // [from, to, value]
    0x40                  // [0x40, from, to, value]
    0x00                  // [0x00, 0x40, from, to, value]
    sha3                  // [slot, from, to, value]
    0x00                  // [0x00, slot, from, to, value]
    mstore                // [from, to, value]
    dup2                  // [to, from, to, value]                  
    0x20                  // [0x20, to, from, to, value]
    mstore                // [from , to, value]
    0x40                  // [0x40, from, to, value]
    0x00                  // [0x00, 0x40, from, to, value]
    sha3                  // [key, from, to, value]
    dup1                  // [key, key, from, to, value]
    sload                 // [allowance, key, from, to, value]

    // check if allowance is sufficient
    0x01                  // [0x01, allowance, key, from, to, value]
    0x00                  // [0x00, 0x01, allowance, key, from, to, value]
    sub                   // [type(uint256).max, allowance, from, to, key, value]
    dup2                  // [allowance, type(uint256).max, allowance, key, from, to, value]
    eq                    // [allowance == type(uint256).max, allowance, key, from, to, value]
    err jumpi             // [allowance == type(uint256).max, allowance, key, from, to, value]

    // update allowance
    pop                    // [allowance, key, from, to, value]
    dup5 swap2             // [allowance, value, key, from, to, value]
    sub                    // [new_allowance, key, from, to, value]
    swap1                  // [key, new_allowance, from, to, value]
    sstore                 // [from, to, value]

    // load balance of from
    swap2                         // [value, from, to]
    dup2                          // [from, value, from, to]
    [BALANCE_LOCATION]            // [balance_ptr, from, value, from, to]
    0x00                          // [0x00, balance_ptr, from, value, from, to]
    mstore                        // [from, value, from, to]
    0x20                          // [0x20, from, value, from, to]
    mstore                        // [value, from, to]
    0x40                          // [0x40, value, from, to]
    0x00                          // [0x00, 0x40, value, from, to]
    sha3                          // [key, value, from, to]
    dup1                          // [key, key, value, from, to]
    sload                         // [balance, key, value, from, to]

    // update balance of from
    dup2                          // [value, balance, key, value, from, to]
    swap1                         // [balance, value, key, value, from, to]
    sub                           // [new_balance, key, value, from, to]

    // store new balance of from
    swap1                         // [key, new_balance, value, from, to]
    sstore                        // [value, from, to]

    // load balance of to from storage
    dup3                          // [to, value, from, to]
    [BALANCE_LOCATION]            // [balance_ptr, to, value, from, to]
    0x00                          // [0x00, balance_ptr, to, value, from, to]
    mstore                        // [to, value, from, to]
    0x20                          // [0x20, to, value, from, to]
    mstore                        // [value, from, to]
    0x40                          // [0x40, value, from, to]
    0x00                          // [0x00, 0x40, value, from, to]
    sha3                          // [key, value, from, to]
    dup1                          // [key, key, value, from, to]
    sload                         // [balance, key, value, from, to]

    // update balance of to
    dup3                          // [value, balance, key, value, from, to]
    swap1                         // [balance, value, value, from, to]
    add                           // [new_balance, key, value, from, to]

    // store new balance of to
    swap1                         // [key, new_balance, value, from, to]
    sstore                        // [value, from, to]

    // emit transfer event
    0x00 mstore                    // [from, to]
    __EVENT_HASH(transfer)         // [event_hash, from, to]
    0x20 0x00                      // [0, 32, event_hash, from, to]
    log3                           // []

    // return true for succesful transfer
    0x01 0x00 mstore
    0x20 0x00 return

    err:
        0x00 0x00 revert
}

#define macro TRANSFER() = takes(0) returns (0) {
    0x04 calldataload              // [to]
    caller                         // [from, to]
    0x24 calldataload              // [amount, from, to]

    // load balance of sender from storage
    dup2                          // [from, amount, from, to]
    [BALANCE_LOCATION]            // [balance_ptr, from, amount, from, to]
    0x00                          // [0x00, balance_ptr, from, amount, from, to]
    mstore                        // [from, amount, from, to]
    0x20                          // [0x20, from, amount, from, to]
    mstore                        // [amount, from, to]
    0x40                          // [0x40, amount, from, to]
    0x00                          // [0x00, 0x40, amount, from, to]
    sha3                          // [key, amount, from, to]
    dup1                          // [key, key, amount, from, to]
    sload                         // [balance, key, amount, from, to]

    // update balance of sender
    dup2                          // [amount, balance, key, amount, from, to]
    swap1                         // [balance, amount, key, amount, from, to]
    sub                           // [new_balance, key, amount, from, to]

    // store new balance of sender
    swap1                         // [key, new_balance, amount, from, to]
    sstore                        // [amount, from, to]

    // load balance of receiver from storage
    dup3                          // [to, amount, from, to]
    [BALANCE_LOCATION]            // [balance_ptr, to, amount, from, to]
    0x00                          // [0x00, balance_ptr, to, amount, from, to]
    mstore                        // [to, amount, from, to]
    0x20                          // [0x20, to, amount, from, to]
    mstore                        // [amount, from, to]
    0x40                          // [0x40, amount, from, to]
    0x00                          // [0x00, 0x40, amount, from, to]
    sha3                          // [key, amount, from, to]
    dup1                          // [key, key, amount, from, to]
    sload                         // [balance, key, amount, from, to]

    // update balance of receiver
    dup3                          // [amount, balance, key, amount, from, to]
    swap1                         // [balance, amount, amount, from, to]
    add                           // [new_balance, key, amount, from, to]

    // store new balance of receiver
    swap1                         // [key, new_balance, amount, from, to]
    sstore                        // [amount, from, to]

    // emit transfer event
    0x00 mstore                    // [from, to]
    __EVENT_HASH(transfer)         // [event_hash, from, to]
    0x20 0x00                      // [0, 32, event_hash, from, to]
    log3                           // []

    // return true for succesful transfer
    0x01 0x00 mstore
    0x20 0x00 return

    // Error destination
    // error:
    //     0x00 0x00 revert
}

#define macro APPROVE() = takes (0) returns (0) {
    0x24 calldataload       // [value]
    0x04 calldataload       // [to, value]
    caller                  // [from, to, value]

    // retrieve allowance from storage
    [ALLOWANCE_LOCATION]  // [allowance_ptr, from, to, value]
    0x00                  // [0x00, allowance_ptr, from, to, value]
    mstore                // [from, to, value]
    dup1                  // [from, from, to, value]
    0x20                  // [0x20, from, from, to, value]
    mstore                // [from, to, value]
    0x40                  // [0x40, from, to, value]
    0x00                  // [0x00, 0x40, from, to, value]
    sha3                  // [slot, from, to, value]
    0x00                  // [0x00, slot, from, to, value]
    mstore                // [from, to, value]
    dup2                  // [to, from, to, value]                  
    0x20                  // [0x20, to, from, to, value]
    mstore                // [from , to, value]
    0x40                  // [0x40, from, to, value]
    0x00                  // [0x00, 0x40, from, to, value]
    sha3                  // [key, from, to, value]
    dup4 swap1            // [key, value, from, to, value]
    sstore                // [from, to, value]

    // emit transfer event
    swap2                          // [value, from, to]
    0x00 mstore                    // [from, to]
    __EVENT_HASH(approval)         // [event_hash, from, to]
    0x20 0x00                      // [0, 32, event_hash, from, to]
    log3                           // []

    // return true for succesful approval
    0x01 0x00 mstore
    0x20 0x00 return
}

#define macro MINT() = takes(0) returns (0) {

}

#define macro BURN() = takes(0) returns (0) {}


// Main Macro
#define macro MAIN() = takes(0) returns (0) {
    0x00 calldataload             // [calldata, 0x00]
    0xe0 shr                  // [func_sig]

    dup1 __FUNC_SIG(name)          eq name          jumpi
    dup1 __FUNC_SIG(symbol)        eq symbol        jumpi
    dup1 __FUNC_SIG(decimals)      eq decimals      jumpi
    dup1 __FUNC_SIG(totalSupply)   eq totalSupply   jumpi
    dup1 __FUNC_SIG(balanceOf)     eq balanceOf     jumpi
    dup1 __FUNC_SIG(allowance)     eq allowance     jumpi
    dup1 __FUNC_SIG(transfer)      eq transfer      jumpi
    dup1 __FUNC_SIG(transferFrom)  eq transferFrom  jumpi
    dup1 __FUNC_SIG(approve)       eq approve       jumpi
    dup1 __FUNC_SIG(mint)          eq mint          jumpi
    dup1 __FUNC_SIG(burn)          eq burn          jumpi

    // Call the function
    name:
        NAME()
    symbol:
        SYMBOL()
    decimals:
        DECIMALS()
    totalSupply:
        TOTAL_SUPPLY()
    balanceOf:
        BALANCE_OF()
    allowance:
        ALLOWANCE()
    transfer:
        TRANSFER()
    transferFrom:
        TRANSFER_FROM()
    approve:
        APPROVE()
    mint:
        MINT()
    burn:
        BURN()

    0x00 0x00 revert
}