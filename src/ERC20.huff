/// @title ERC20
/// @author Ahiara Ikechukwu Marvellous
/// @notice An ERC20 token implementation in Huff
/// @dev This is a simple ERC4626 token implementation based on transmissions11 solmate implentation.

/* Interface */
#define function name() nonpayable returns(string)
#define function symbol() nonpayable returns (string)
#define function decimals() nonpayable returns (uint8)

#define function balanceOf(address) view returns (uint256)
#define function allowance(address,address) view returns (uint256)
#define function totalSupply() view returns (uint256)

#define event Transfer(address,address,uint256)
#define event Approval(address,address,uint256)

/* Event Signatures */
#define constant TRANSFER_EVENT_SIGNATURE = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
#define constant APPROVAL_EVENT_SIGNATURE = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925

/* Metadata Storage Slots */
#define constant NAME_LOACATION = FREE_STORAGE_POINTER()
#define constant SYMBOL_LOCATION = FREE_STORAGE_POINTER()
#define constant DECIMALS = 0x0000000000000000000000000000000000000000000000000000000000000018 // actually immutable gets swapped out in deployment

/* ERC20 Storage Slots */
#define constant TOTAL_SUPPLY_LOCATION = FREE_STORAGE_POINTER()
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()

/* Constructor */
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Copy first argument (string) and length into memory
    0x40                        // [size] - byte size to copy
    0x80 codesize               // [argument-offset, contractsize] - where arguments start and contract size
    sub                         // [offset] - offset in the code to copy from
    0x00                        // [mem, offset, size] - offset in memory to copy to
    codecopy                    // []

    // store first argument
    0x00                   // [0x00]
    mload                  // [arglength]
    0x20                   // [0x20, arglength]
    mload                  // [arg, argLength]
    swap1                  // [argLength, arg]
    0x01                   // [1, argLength, arg]
    shl                    // [arglength * 2, arg]
    or                     // [arg] 
    [NAME_LOACATION]       // [name_ptr]
    sstore

    // Copy the second argument into memory
    0x20                        // [size] - byte size to copy
    0x20 codesize               // [argument-offset, contractsize] - where arguments start and contract size
    sub                         // [offset] - offset in the code to copy from
    0x00                        // [mem, offset, size] - offset in memory to copy to
    codecopy                    // []

    // Store the second argument in storage
    0x00                        // [0x00]
    mload                       // [arg2]
    [SYMBOL_LOCATION]           // [symbol_ptr]
    sstore                      // []
}

#define macro NAME() = takes (0) returns (0) {
    [NAME_LOACATION]     // [name_ptr]
    sload                // [name]

    // store in memory
    0x00                 // [0x00, name]
    mstore               // []

    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro SYMBOL() = takes (0) returns (0) {
    // read symbol from storage
    [SYMBOL_LOCATION]    // [symbol_ptr]
    sload                // [symbol]

    // store in memory
    0x00                 // [0x00, symbol]
    mstore               // []

    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro DECIMALS() = takes (0) returns (0) {
    // store in memory
    [DECIMALS]           // [DECIMALS]
    sload              // []

    // store in memory
    0x00                 // [0x00, decimals]
    mstore               // []
    
    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    // read total supply from storage
    [TOTAL_SUPPLY_LOCATION] // [total_supply_ptr]
    sload                // [total_supply]
    
    // store in memory
    0x00                 // [0x00, total_supply]
    mstore               // []
    
    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro BALANCE_OF() = takes (0) returns (0) {
    // read balance from storage
    0x04 calldataload    // [address]
    [BALANCE_LOCATION]   // [balance_ptr, address]
    0x00                 // [0x00, balance_ptr, address]
    mstore               // [address]
    0x20                 // [0x20, address]
    mstore               // []
    0x40                // [0x40, address]
    0x00                // [0x00, 0x00, address]
    sha3                 // [key]
    sload                // [balance]
    
    // store in memory
    0x00                 // [0x00, balance]
    mstore               // []
    
    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

#define macro ALLOWANCE() = takes (0) returns (0) {
    // read allowance from storage
    [ALLOWANCE_LOCATION] // [ALLOWANCE_LOCATION]
    sload                // [allowance]
    
    // store in memory
    0x00                 // [0x00, allowance]
    mstore               // []
    
    // return
    0x20                 // [0x20]
    0x00                 // [0x00, 0x00]
    return               // []
}

// Main Macro
#define macro MAIN() = takes(0) returns (0) {
  0x00 calldataload             // [calldata, 0x00]
  0xe0 shr                  // [func_sig]

  dup1 __FUNC_SIG(name) eq name jumpi
  dup1 __FUNC_SIG(symbol) eq symbol jumpi
  dup1 __FUNC_SIG(decimals) eq decimals jumpi
  dup1 __FUNC_SIG(totalSupply) eq totalSupply jumpi
  dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
  dup1 __FUNC_SIG(allowance) eq allowance jumpi

  // Call the function
  name:
      NAME()
  symbol:
      SYMBOL()
  decimals:
      DECIMALS()
  totalSupply:
      TOTAL_SUPPLY()
  balanceOf:
      BALANCE_OF()
  allowance:
      ALLOWANCE()

  0x00 0x00 revert
}